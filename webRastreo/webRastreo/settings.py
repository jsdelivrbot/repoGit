"""
Django settings for webRastreo project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Set paths
#fillPath = lambda x: os.path.join(os.path.dirname(__file__), x)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'gu-lk&m19e7%&t@d_s^^+2atdu9aa)o5j*zo*4jqd=re-kcw8j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
  #  'django.contrib.sites',
    'django.contrib.gis',
    'general',
    'clientes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webRastreo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(os.path.dirname(__file__),'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webRastreo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'testgis_db3',
        'USER': 'testgis_user',
        'PASSWORD': '1234',
        'HOST': 'localhost',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
#MEDIA_ROOT = os.path.join(os.path.dirname(__file__),'media\\').replace("/","\\")
#MEDIA_ROOT = "C:\\Users\\Administrator\\virtual\\cdrAsterbox\\src\\webAsterbox\\webAsterbox\\media\\"
MEDIA_ROOT = "/home/juan/virtuales/webRastreo/webRastreo/webRastreo/media/"

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

#ACCOUNT_ACTIVATION_DAYS = 7 #dias que tiene para verificar la cuenta el usuario una ves registrado
#REGISTRATION_AUTO_LOGIN = True # Automatically log the user in.
#SITE_ID = 1  #ESTO ACTIVA LA APLICACION   'django.contrib.sites', QUE POR DEFECTO NO ESTABA NI SE ACTIVA SOLA

LOGIN_REDIRECT_URL = '/'  #dice donde redirecciona luego del login

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'juanonlytechnology@gmail.com'
EMAIL_HOST_PASSWORD = 'aa'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

#AUTH_USER_MODEL = 'clientes.User'


# definimos el perfir de los usuarios
AUTH_PROFILE_MODULE = 'clientes.userProfile'

#Si quieres que la sesión expire pasado cierto tiempo después de que el usuario hace login, inicializa la variable SESSION_COOKIE_AGE en el settings.py:
#SESSION_COOKIE_AGE = 3600

# Si quieres que la sesión expire una vez que el usuario cierre el navegador, inicializa la variable SESSION_EXPIRE_AT_BROWSER_CLOSE en el settings.py:
#SESSION_EXPIRE_AT_BROWSER_CLOSE = True
"""
#como saber si un usuario esta en linea con django.

Para empezar hay que agregar estas líneas en el settings.py
# Acá configuramos redis (Se puede usar memcached)
CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': 'localhost:6379',
        'OPTIONS': {
            'DB': 1
            }
        }
}


# Número de segundos de inactividad antes de que un usuario se marca fuera de línea
USER_ONLINE_TIMEOUT = 300

# Número de segundos que vamos a hacer seguimiento de los usuarios inactivos, para antes de su
# visto por última vez. Se elimina de la memoria caché
USER_LASTSEEN_TIMEOUT = 60 * 60 * 24 * 7


----------------------------------------
Luego en nuestro modelo por ejemplo profile. Agregamos los siguientes métodos:

import datetime

from django.core.cache import cache
from myproject import settings

# Verifica la última conexión de un usuario
def last_seen(self):
    return cache.get('seen_%s' % self.user.username)

# Chequea si un usuario esta online
def online(self):
    if self.last_seen():
        now = datetime.datetime.now()
        if now > self.last_seen() + datetime.timedelta(
                     seconds=settings.USER_ONLINE_TIMEOUT):
            return False
        else:
            return True
    else:
        return False

----------------------------

El siguiente paso es crear un middleware, el archivo se llamará middleware.py, lo creamos en nuestra aplicación a la misma altura que models.py y agregamos la siguiente clase:

import datetime
from django.core.cache import cache
from django.conf import settings

class ActiveUserMiddleware(Object):

    # Esté middleware setea en cache cuando un usuario se loguea
    def process_request(self, request):
        current_user = request.user
        if request.user.is_authenticated():
            now = datetime.datetime.now()
            cache.set('seen_%s' % (current_user.username), now,
                           settings.USER_LASTSEEN_TIMEOUT)

-----------------------------
Luego lo agregamos en settings.py, algo así:
MIDDLEWARE_CLASSES = (
    ...
    'mynameapp.middleware.ActiveUserMiddleware',
)


-----------------
Listo la parte backend, ahora en nuestros template donde queremos mostrar si está en linea agregamos lo siguiente:

<table>
   <tr><th>Última conexión</th><td>{% if profile.last_seen %}{{ profile.last_seen|timesince }}{% endif %}</td></tr>
   <tr><th>Online</th><td>{{ profile.online }}</td></tr>
 </table>
"""